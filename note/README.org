#+TITLE: clj-chart demo

* Histogram

#+begin_src clojure :results file graphics replace :output-dir figures :file histogram.svg :exports both :eval no-export
(require '[clj-chart.histogram :refer :all])
(require '[clj-chart.plot :refer :all])
(let [chart (histogram {:title "Hello Hisogram Chart"
                        :x-axis "X" :y-axis "Y"
                        :bins 6 :min 0 :max 12
                        :series {"S1" [0 1 2 3 4 5]
                                 "S2" [1 2 6 7 1 1 1 1]
                                 "S3" [1 2 6 7 1 1 1 1]
                                 "S4" [1 2 6 7 1 1 1 1 2 2 2 2]
                                 "S5" [1 2 6 7 1 1 1 8 9 10]}})]
  (store! chart nil "note/figures/histogram.svg"))
#+end_src

#+RESULTS:
[[file:figures/histogram.svg]]

* Quick Chart

#+begin_src clojure :results file graphics replace :output-dir figures :file quickchart.svg :exports both :eval no-export
(use '[clj-chart.quick])
(use '[clj-chart.plot])
(let [chart (quick {:title "Hello Quick Chart"
                         :x-axis "X" :y-axis "Y" :legend "Y(X)"
                         :xs [1 2 3] :ys [4 5 6]})]
  (store! chart nil "note/figures/quickchart"))
#+end_src

#+RESULTS:
[[file:figures/quickchart.svg]]

* Area Chart

#+begin_src clojure :results file graphics replace :output-dir figures :file areachart.svg :exports both :eval no-export
(use '[clj-chart.area])
(use '[clj-chart.plot])
(let [chart (area {:title "Hello Area Chart"
                   :x-axis "X" :y-axis "Y"
                   :series [{:name "A"
                             :xs [1 2 3 4 5]
                             :ys [1 3 5 7 9]}
                            {:name "B"
                             :xs [1 3 5 7 9]
                             :ys [2 4 6 8 10]}]})]
  (store! chart nil "note/figures/areachart.svg"))
#+end_src

#+RESULTS:
[[file:figures/areachart.svg]]

* Pie Chart

#+begin_src clojure :results file graphics replace :output-dir figures :file piechart.svg :exports both :eval no-export
(use '[clj-chart.pie])
(use '[clj-chart.plot])
(let [chart (pie {:title "Hello Pie Chart"
                   :series [{:name "A" :value 10}
                            {:name "B" :value 15}]})]
  (store! chart nil "note/figures/piechart.svg"))
#+end_src

#+RESULTS:
[[file:figures/piechart.svg]]

* Donut Chart

#+begin_src clojure :results file graphics replace :output-dir figures :file donutchart.svg :exports both :eval no-export
(use '[clj-chart.donut])
(use '[clj-chart.plot])
(let [chart (donut {:title "Hello Pie Chart"
                   :series [{:name "A" :value 10}
                            {:name "B" :value 15}]})]
  (store! chart nil "note/figures/donutchart.svg"))
#+end_src

#+RESULTS:
[[file:figures/donutchart.svg]]

* Scatter Chart

#+begin_src clojure :results file graphics replace :output-dir figures :file scatterchart.svg :exports both :eval no-export
(use '[clj-chart.scatter])
(use '[clj-chart.plot])
(let [chart (scatter {:title "Hello Scatter Chart"
                      :series [{:name "A"
                                :xs (repeatedly 100 #(rand-int 1000))
                                :ys (repeatedly 100 #(rand-int 1000))}
                               {:name "B"
                                :xs (repeatedly 100 #(rand-int 1000))
                                :ys (repeatedly 100 #(rand-int 1000))}]})]
  (store! chart nil "note/figures/scatterchart.svg"))
#+end_src

#+RESULTS:
[[file:figures/scatterchart.svg]]

* Bubble Chart

#+begin_src clojure :results file graphics replace :output-dir figures :file bubblechart.svg :exports both :eval no-export
(use '[clj-chart.bubble])
(use '[clj-chart.plot])
(let [chart (bubble {:title "Hello Bubble Chart"
                      :series [{:name "A"
                                :xs [1 2 3]
                                :ys [3 4 5]
                                :size [10 20 30]}
                               {:name "B"
                                :xs [3 3 4]
                                :ys [3 4 5]
                                :size [30 20 30]}]})]
  (store! chart nil "note/figures/bubblechart.svg"))
#+end_src

#+RESULTS:
[[file:figures/bubblechart.svg]]

* Bar Chart

#+begin_src clojure :results file graphics replace :output-dir figures :file barchart.svg :exports both :eval no-export
(use '[clj-chart.bar])
(use '[clj-chart.plot])
(let [chart (bar {:title "Hello Bar Chart"
                      :series [{:name "A"
                                :xs [1 2 3]
                                :ys [3 4 5]}
                               {:name "B"
                                :xs [1 2 3]
                                :ys [3 5 7]}]})]
  (store! chart nil "note/figures/barchart.svg"))
#+end_src

#+RESULTS:
[[file:figures/barchart.svg]]

* Line Chart

#+begin_src clojure :results file graphics replace :output-dir figures :file linechart.svg :exports both :eval no-export
(use '[clj-chart.line])
(use '[clj-chart.plot])
(let [chart (line {:title "Hello Line Chart"
                      :series [{:name "A"
                                :xs [1 2 3]
                                :ys [3 4 5]}
                               {:name "B"
                                :xs [1 2 3]
                                :ys [3 9 7]}]})]
  (store! chart nil "note/figures/linechart.svg"))
#+end_src

#+RESULTS:
[[file:figures/linechart.svg]]

* Logarithmic Line Chart

#+begin_src clojure :results file graphics replace :output-dir figures :file logarithmiclinechart.svg :exports both :eval no-export
(use '[clj-chart.logarithmic-line])
(use '[clj-chart.plot])
(let [chart (logarithmic-line {:title "Hello Logarithmic Line Chart"
                               :series [{:name "A"
                                         :xs [-3 -2 -1 0 1 2 3]
                                         :ys (map #(Math/pow 10 %) [-3 -2 -1 0 1 2 3])}
                                        {:name "B"
                                         :xs [-3 -2 -1 0 1 2 3]
                                         :ys (map #(Math/pow 100 %) [-3 -2 -1 0 1 2 3])}]})]
  (store! chart nil "note/figures/logarithmiclinechart.svg"))
#+end_src

#+RESULTS:
[[file:figures/logarithmiclinechart.svg]]
