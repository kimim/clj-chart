#+TITLE: clj-chart demo
[[https://clojars.org/io.github.kimim/clj-chart][https://img.shields.io/clojars/v/io.github.kimim/clj-chart.svg]]

* Quick Chart

Draw quick xy chart with two vectors, vector for x and vector for y:

#+header: :output-dir figures :file quick-xy.svg
#+begin_src clojure :results file graphics replace :exports both :eval no-export
(require '[clj-chart.core :as c])
(require '[clojure.math :as math])
(let [x (range 0 10 0.01)
      y (map #(math/sin %) x)
      chart (c/quick-xy x y)]
  (c/save! "docs/figures/quick-xy.svg" chart))
#+end_src

#+RESULTS:
[[file:figures/quick-xy.svg]]

Draw a diagram with a sequence of x and y:

#+header: :output-dir figures :file quick-seq.svg
#+begin_src clojure :results file graphics replace :exports both :eval no-export
(require '[clj-chart.core :as c])
(let [chart (c/quick-seq [[1 1][2 3][3 9]])]
  (c/save! "docs/figures/quick-seq.svg" chart))
#+end_src

#+RESULTS:
[[file:figures/quick-seq.svg]]

Draw quick xy chart with sequence of maps:

#+header: :output-dir figures :file quick-mapseq.svg
#+begin_src clojure :results file graphics replace :exports both :eval no-export
(require '[clj-chart.core :as c])
(let [chart (c/quick-mapseq [{:x 1 :y 1}{:x 2 :y 4}{:x 3 :y 9}])]
  (c/save! "docs/figures/quick-mapseq.svg" chart))
#+end_src

#+RESULTS:
[[file:figures/quick-mapseq.svg]]
